<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Eric Jones</title>
 <link href="http://www.aracrown.org/atom.xml" rel="self"/>
 <link href="http://www.aracrown.org/"/>
 <updated>2015-06-09T07:29:18+03:00</updated>
 <id>http://erjjones.github.com</id>
 <author>
   <name>Eric Jones</name>
 </author>
 
 
 <entry>
   <title>Micro Java EE application with Wildfly Swarm</title>
   <link href="http://www.aracrown.org/blog/Micro-Java-EE-application-with-Wildfly-Swarm/"/>
   <updated>2015-06-09T00:00:00+03:00</updated>
   <id>http://www.aracrown.org/blog/Micro-Java-EE-application-with-Wildfly-Swarm</id>
   <content type="html">&lt;p&gt;
Microservices are here already for a while. They came with cloud solutions, RESTful services, &lt;a href=&quot;http://backbonejs.org/&quot; rel=&quot;nofollow&quot;&gt;Backbone.js&lt;/a&gt; , 
&lt;a href=&quot;https://angularjs.org/&quot; rel=&quot;nofollow&quot;&gt;AngularJS&lt;/a&gt;  and other javascript frameworks, however only recently they got a new keyword - &quot;microservices&quot;.
And of course they will stay. Due to the nature of nowadays software architecture, cloud hosting and client rendering.
I you want to be pragmatic and lean - you do not need microservices. If your software is complex, it needs easy support, fast deployment, easy clustering and serving for a single module (e.g. finance module within huge
CRM) then you might thing about going into microservices.
And here &lt;a href=&quot;http://wildfly.org/news/2015/06/05/WildFly-Swarm-Alpha2/&quot; rel=&quot;nofollow&quot;&gt;Wildfly Swarm&lt;/a&gt; comes in.

&lt;/p&gt;

&lt;h3&gt;What is Wildfly Swarm?&lt;/h3&gt;

&lt;p&gt;
You can think about &lt;a href=&quot;http://wildfly.org/news/2015/06/05/WildFly-Swarm-Alpha2/&quot; rel=&quot;nofollow&quot;&gt;Wildfly Swarm&lt;/a&gt;  as a micro application server with features which are required for your applications only.
And these features are embedded into one single jar together with your module. Yes, coupling with application server does not smell well, but useful in some cases. That&#39;s why I 
always say that you need to stick with your requirements and check if need such type of architecture.

&lt;/p&gt;

&lt;h3&gt;Example&lt;/h3&gt;

&lt;p&gt;
The easiest example to provide is REST + DB as a single microservice for a single module. You define data entities and expose them via REST endpoint. UI may be created as a separate microservice.
&lt;/p&gt;

&lt;h3&gt;What you need?&lt;/h3&gt;

&lt;p&gt;
Wildfly Swarm Alpha3-SNAPSHOT. Alpha1 did not support JPA and Alpha2 still has some issues which are already fixed in latest SNAPSHOT version. This means that you need to grab it from github and build yourself. 
Or wait for Alpha3 release.
&lt;/p&gt;

&lt;p&gt;
Then you need some wildfly dependencies.
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.wildfly.swarm&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;wildfly-swarm-jpa&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;${wildfly-swarm.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.wildfly.swarm&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;wildfly-swarm-weld-jaxrs&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;${wildfly-swarm.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
And wildfly plugins...
&lt;/p&gt;
&lt;pre&gt;
&amp;lt;plugin&amp;gt;
	&amp;lt;groupId&amp;gt;org.wildfly.swarm&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;wildfly-swarm-plugin&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;${wildfly-swarm.version}&amp;lt;/version&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;mainClass&amp;gt;org.aracrown.blog.s01e04.Main&amp;lt;/mainClass&amp;gt;
	&amp;lt;/configuration&amp;gt;
	&amp;lt;executions&amp;gt;
		&amp;lt;execution&amp;gt;
			&amp;lt;goals&amp;gt;
				&amp;lt;goal&amp;gt;package&amp;lt;/goal&amp;gt;
			&amp;lt;/goals&amp;gt;
		&amp;lt;/execution&amp;gt;
	&amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
And some code... Ok, &lt;a href=&quot;https://github.com/aracrown/ara-blog-examples/tree/master/s01e04&quot; rel=&quot;nofollow&quot;&gt;source is in Git repository&lt;/a&gt;, I will not repeat myself here :)
&lt;/p&gt;

&lt;p&gt;
And the main thing, which comes to Wildfly swarm - configuration! So far you need a Java class with main method in order to be able to start it as a regular jar archive. That&#39;s the place where nasty things happen :)

&lt;/p&gt;
&lt;pre&gt;
package org.aracrown.blog.s01e04;

import org.aracrown.blog.s01e04.dao.BlogEntryDao;
import org.aracrown.blog.s01e04.model.BlogEntry;
import org.aracrown.blog.s01e04.query.BlogEntryQueryImpl;
import org.aracrown.blog.s01e04.resources.BlogEntriesResource;
import org.jboss.shrinkwrap.api.asset.ClassLoaderAsset;
import org.wildfly.swarm.container.Container;
import org.wildfly.swarm.datasources.Datasource;
import org.wildfly.swarm.datasources.DatasourceDeployment;
import org.wildfly.swarm.datasources.DriverDeployment;
import org.wildfly.swarm.jaxrs.JAXRSDeployment;

public class Main {
	public static void main(String[] args) throws Exception {
		Container container = new Container();
		container.start();

		DriverDeployment driverDeployment = new DriverDeployment(container, &quot;com.h2database:h2&quot;, &quot;h2&quot;);
		container.deploy(driverDeployment);

		// Create a DS deployment
		DatasourceDeployment dsDeployment = new DatasourceDeployment(container, new Datasource(&quot;ExampleDS&quot;)
				.connectionURL(&quot;jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE&quot;).driver(&quot;h2&quot;).authentication(&quot;sa&quot;, &quot;sa&quot;));
		container.deploy(dsDeployment);

		JAXRSDeployment deployment = new JAXRSDeployment(container);
		deployment.getArchive().addClasses(BlogEntryDao.class, BlogEntryQueryImpl.class);
		deployment.getArchive().addPackage(BlogEntry.class.getPackage());
		deployment.getArchive().addPackage(BlogEntriesResource.class.getPackage());
		deployment.getArchive().addAsWebInfResource(new ClassLoaderAsset(&quot;META-INF/persistence.xml&quot;, Main.class.getClassLoader()),
				&quot;classes/META-INF/persistence.xml&quot;);
		deployment.getArchive().addAsWebInfResource(new ClassLoaderAsset(&quot;META-INF/load.sql&quot;, Main.class.getClassLoader()),
				&quot;classes/META-INF/load.sql&quot;);
		deployment.getArchive().addAsWebInfResource(new ClassLoaderAsset(&quot;META-INF/beans.xml&quot;, Main.class.getClassLoader()),
				&quot;classes/META-INF/beans.xml&quot;);

		container.deploy(deployment);
	}
}

&lt;/pre&gt;

&lt;p&gt;
You tell the container to use JAX-RS and datasource modules only. You can expose your configuration properties to external properties file, but what you need is adding classes and resources into archive manually.
Executing maven goal &lt;strong&gt;mvn package&lt;/strong&gt; will create you a single jar containing all required dependencies with a suffix &lt;strong&gt;&quot;-swarm&quot;&lt;/strong&gt;.
&lt;/p&gt;

&lt;p&gt;
And at the end you have a single jar file and you can distribute it onto as many servers as you need. and run with just a single line: 
&lt;/p&gt;

&lt;pre&gt;java -jar target/s01e04-1.0.0-SNAPSHOT-swarm.jar&lt;/pre&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aracrown/ara-blog-examples/tree/master/s01e04&quot; rel=&quot;nofollow&quot;&gt;Source in Git repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wildfly-swarm/wildfly-swarm-examples&quot; rel=&quot;nofollow&quot;&gt;Wildfly-Swarm examples privided by Wildfly&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;h3&gt;Talks and discussions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.chrisstucchio.com/blog/2014/microservices_for_the_grumpy_neckbeard.html&quot; rel=&quot;nofollow&quot;&gt;Microservices for the Grumpy Neckbeard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.boundary.com/blog/2014/08/microservices-conways-law/&quot; rel=&quot;nofollow&quot;&gt;Microservices, or How I Learned To Stop Making Monoliths and Love Conway’s Law&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rick-hightower.blogspot.fi/2015/03/java-microservices-architecture.html&quot; rel=&quot;nofollow&quot;&gt;Java Microservices Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://martinfowler.com/bliki/MonolithFirst.html&quot; rel=&quot;nofollow&quot;&gt;MonolithFirst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bravenewgeek.com/service-disoriented-architecture/&quot; rel=&quot;nofollow&quot;&gt;Service-Disoriented Architecture&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;
Happy designing and coding! 
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing type-safe JPA queries with QueryDSL</title>
   <link href="http://www.aracrown.org/blog/Writing-type-safe-queries-with-QueryDSL/"/>
   <updated>2015-05-22T00:00:00+03:00</updated>
   <id>http://www.aracrown.org/blog/Writing-type-safe-queries-with-QueryDSL</id>
   <content type="html">&lt;p&gt;
I became a fan of type-safe queries long time ago (unless I need plain SQL queries via JDBC). What are type-safe queries and how easily they can be maintained? 
&lt;a href=&quot;http://docs.oracle.com/javaee/7/tutorial/persistence-criteria001.htm#GJRIJ&quot; rel=&quot;nofollow&quot;&gt;Criteria&lt;/a&gt;, &lt;a href=&quot;http://www.querydsl.com/&quot; rel=&quot;nofollow&quot;&gt;QueryDSL&lt;/a&gt;, &lt;a href=&quot;http://www.jooq.org/&quot; rel=&quot;nofollow&quot;&gt;JOOQ&lt;/a&gt;? This post is not about which framework is the best one. 
It’s about how easily implement JPA queries using 
&lt;a href=&quot;http://www.querydsl.com/&quot; rel=&quot;nofollow&quot;&gt;QueryDSL&lt;/a&gt;.

&lt;/p&gt;

&lt;p&gt;
I believe &lt;a href=&quot;http://www.jooq.org/&quot; rel=&quot;nofollow&quot;&gt;JOOQ&lt;/a&gt; is a great framework for plain SQL based environments, however my main work is based on JPA environments, 
so I chose &lt;a href=&quot;http://www.querydsl.com/&quot; rel=&quot;nofollow&quot;&gt;QueryDSL&lt;/a&gt;. Why not the standard - &lt;a href=&quot;http://docs.oracle.com/javaee/7/tutorial/persistence-criteria001.htm#GJRIJ&quot; rel=&quot;nofollow&quot;&gt;Criteria&lt;/a&gt;? Due to it’s complexity. I always try to make things simple, 
and using &lt;a href=&quot;http://docs.oracle.com/javaee/7/tutorial/persistence-criteria001.htm#GJRIJ&quot; rel=&quot;nofollow&quot;&gt;Criteria&lt;/a&gt; is not the case. 

&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG&quot; rel=&quot;nofollow&quot;&gt;JPQL&lt;/a&gt; is great to develop things fast, but maintenance is slow when you change your entity structure. And you do not see the issues 
unless you know the code by heart. But what if that code is not written by you? Unit tests - true, but sometimes the life is not so 
easy as we would like it to be :) In that case &lt;a href=&quot;http://www.querydsl.com/&quot; rel=&quot;nofollow&quot;&gt;QueryDSL&lt;/a&gt; gives you some advantage to trace the appearing query issues easily during 
compile time.  It does not solve all your issues, but at least it minimizes them :) 

&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Concerns:&lt;/b&gt; Tim has left &lt;a href=&quot;http://www.mysema.com/&quot; rel=&quot;nofollow&quot;&gt;Mysema&lt;/a&gt;, however I believe he will continue to support &lt;a href=&quot;http://www.querydsl.com/&quot; rel=&quot;nofollow&quot;&gt;QueryDSL&lt;/a&gt; project!

&lt;/p&gt;

&lt;h3&gt;Preconditions&lt;/h3&gt;

&lt;p&gt;
You need this environment setup in order to successfully complete the provided guide:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://maven.apache.org/&quot; rel=&quot;nofollow&quot;&gt;Apache Maven 3.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/downloads/&quot; rel=&quot;nofollow&quot;&gt;Eclipse Luna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.querydsl.com/&quot; rel=&quot;nofollow&quot;&gt;QueryDSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JPA model&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Issue&lt;/h3&gt;

&lt;p&gt;
The main issue here is the complexity of Criteria API in order to create a JPA type-safe query. I am able to write a fast query using 
&lt;a href=&quot;https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG&quot; rel=&quot;nofollow&quot;&gt;JPQL&lt;/a&gt;, but it also might be a buggy one as well.
 On other hand I am free to to build a type-safe query with &lt;a href=&quot;http://docs.oracle.com/javaee/7/tutorial/persistence-criteria001.htm#GJRIJ&quot; rel=&quot;nofollow&quot;&gt;Criteria API&lt;/a&gt;, 
but for that reason I need a &lt;b&gt;CriteriaBuilder&lt;/b&gt;, &lt;b&gt;Root&lt;/b&gt; and &lt;b&gt;CriteriaQuery&lt;/b&gt;. Let’s take an example:
&lt;/p&gt;

&lt;pre&gt;
CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery&amp;lt;BlogEntry&amp;gt; cq = cb.createQuery(BlogEntry.class);
Root&amp;lt;BlogEntry&amp;gt; be = cq.from(BlogEntry.class);
cq.select(be);
TypedQuery&amp;lt;BlogEntry&amp;gt; q = em.createQuery(cq);
List&amp;lt;BlogEntry&amp;gt; allItems = q.getResultList();

Assert.assertTrue(allItems.isEmpty());
&lt;/pre&gt;

&lt;p&gt;
Too many things to do and remember.
&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;p&gt;
With QueryDSL your things to remember are minimised and you may start doing what you were intended to do - write a query. Of course, you need to setup your environment to 
create a metamodel for you:
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/s01e03.png&quot; alt=&quot;Eclipse annotation processing&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
Then you need to configure maven &lt;strong&gt;pom.xml&lt;/strong&gt; file to add required dependencies. But that is one time work to be done for every project.
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;com.mysema.querydsl&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;querydsl-apt&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;3.6.3&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
		
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;com.mysema.querydsl&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;querydsl-jpa&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;3.6.3&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Plain QueryDSL syntax&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
Metamodel is automatically generated for you once you have prepared your domain model. You should be able to start writing your queries :)
&lt;/p&gt;

&lt;pre&gt;
QBlogEntry qb = QBlogEntry.blogEntry;
Assert.assertTrue(new JPAQuery(getEntityManager()).from(qb).where(qb.title.eq(&quot;test&quot;)).fetch().exists());
&lt;/pre&gt;

&lt;p&gt;Your query starts using standard methods, such as &lt;strong&gt;from&lt;/strong&gt; and &lt;strong&gt;where&lt;/strong&gt; and continues to grow once additional predicates are added. Of course, it grows based on your domain complexity.
But at least you know what properties are available for predicate to be built.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JPAQuery Wrapper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
	Usually I am trying to go even further and minimize the list of possible properties, available for queries. 
	This would allow you to minimize unexpected application behaviour of your application. Example provided below and detailed implementation is in &lt;a href=&quot;https://github.com/aracrown/ara-blog-examples/tree/master/s01e03&quot; rel=&quot;nofollow&quot;&gt;Git repository&lt;/a&gt;!
&lt;/p&gt;

&lt;pre&gt;
Assert.assertTrue(new BlogEntryQueryImpl(getEntityManager()).title(&quot;test&quot;).list().isEmpty());
&lt;/pre&gt;

&lt;p&gt;
Where the &lt;strong&gt;BlogEntryQueryImpl&lt;/strong&gt; implementation is as follows:
&lt;/p&gt;

&lt;pre&gt;
public class BlogEntryQueryImpl extends AbstractQuery&amp;lt;QBlogEntry, BlogEntry&amp;gt; {

	public BlogEntryQueryImpl(EntityManager entityManager) {
		super(entityManager, QBlogEntry.blogEntry);
	}

	public BlogEntryQueryImpl title(String title) {
		getQuery().where(getEntityPath().title.eq(title));
		return this;
	}

}
&lt;/pre&gt;

&lt;p&gt;
	As always you need to follow the requirements and see what is the best way you need for your project. 
&lt;/p&gt;

&lt;h3&gt;Cons&lt;/h3&gt;

&lt;p&gt;
You cannot join your entities based on some property, which is not a foreign key. And sometimes this is a really painful situation.
&lt;/p&gt;

&lt;h3&gt;Alternatives&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/7/tutorial/persistence-criteria001.htm#GJRIJ&quot; rel=&quot;nofollow&quot;&gt;Criteria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.querydsl.com/&quot; rel=&quot;nofollow&quot;&gt;QueryDSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jooq.org/&quot; rel=&quot;nofollow&quot;&gt;JOOQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://projects.spring.io/spring-data-jpa/&quot; rel=&quot;nofollow&quot;&gt;Spring Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And possibly others&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Discussions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jooq.org/2014/05/29/querydsl-vs-jooq-feature-completeness-vs-now-more-than-ever/&quot; rel=&quot;nofollow&quot;&gt;QueryDSL vs. jOOQ. Feature Completeness vs. Now More Than Ever &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/22860167/what-exactly-does-type-safe-queries-means&quot; rel=&quot;nofollow&quot;&gt;What exactly does type-safe queries means?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.mysema.com/2010/04/querydsl-as-alternative-to-jpa-2.html&quot; rel=&quot;nofollow&quot;&gt;Querydsl as an alternative to the JPA 2 Criteria API &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7242388/comparing-querydsl-jooq-jequel-activejdbc-iciql-and-other-query-dsls&quot; rel=&quot;nofollow&quot;&gt;Comparing Querydsl, jOOQ, JEQUEL, activejdbc, iciql and other query DSLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.credera.com/technology-insights/java/can-querydsl-part-1-enhance-simplify-existing-spring-data-jpa-repositories/&quot; rel=&quot;nofollow&quot;&gt;What Can Querydsl Do for Me Part 1: How to Enhance and Simplify Existing Spring Data JPA Repositories&lt;/a&gt;&lt;/li&gt;


&lt;/ul&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aracrown/ara-blog-examples/tree/master/s01e03&quot; rel=&quot;nofollow&quot;&gt;Source in Git repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/7/tutorial/persistence-criteria001.htm#GJRIJ&quot; rel=&quot;nofollow&quot;&gt;Overview of the Criteria and Metamodel APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.querydsl.com/&quot; rel=&quot;nofollow&quot;&gt;QueryDSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/timowestkamper/querydsl-overview-2014&quot; rel=&quot;nofollow&quot;&gt;Querydsl overview 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jooq.org/&quot; rel=&quot;nofollow&quot;&gt;JOOQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://projects.spring.io/spring-data-jpa/&quot; rel=&quot;nofollow&quot;&gt;Spring Data&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;
Happy designing and coding! 
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Web application environment configuration using maven profiles</title>
   <link href="http://www.aracrown.org/blog/Web-application-environment-configuration-using-maven-profiles/"/>
   <updated>2015-05-11T00:00:00+03:00</updated>
   <id>http://www.aracrown.org/blog/Web-application-environment-configuration-using-maven-profiles</id>
   <content type="html">&lt;p&gt;
Ok, this bog will be short. I will just share some small maven code snippets to configure your build and development IDE environment.

&lt;/p&gt;

&lt;p&gt;
For some projects there is a need to use specific environment properties, which may differ from deployment environment.
Let&#39;s say in your IDE you use &lt;em&gt;&quot;Development&quot;&lt;/em&gt; mode, however it is obvious that test, QA and production environments will use &lt;em&gt;&quot;Deployment&quot;&lt;/em&gt; mode.
&lt;/p&gt;
&lt;p&gt;
Usually such property is stored in &lt;strong&gt;web.xml&lt;/strong&gt; file, for example:
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;context-param&amp;gt;
    &amp;lt;param-name&amp;gt;javax.faces.PROJECT_STAGE&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;${jsf.projectStage}&amp;lt;/param-value&amp;gt;
&amp;lt;/context-param&amp;gt;
&lt;/pre&gt;

&lt;h3&gt;Issue&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
We do not want to commit &lt;em&gt;&quot;Development&quot;&lt;/em&gt; mode into source control.
&lt;/li&gt;
&lt;li&gt;
We do not want to use &lt;em&gt;&quot;Deployment&quot;&lt;/em&gt; mode in our local IDE.
&lt;/li&gt;
&lt;li&gt;
We do not want to have uncommitted changes if using &lt;em&gt;&quot;Development&quot;&lt;/em&gt; mode locally.
&lt;/li&gt;
&lt;li&gt;
We DO want properly running local environment :) Sure!
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
By default property &lt;em&gt;${jsf.projectStage}&lt;/em&gt; is not properly understood by IDE (at least Eclipse WTP) and is not transformed into real value. Well, maybe it should be a nice feature...
However, if you are using &lt;a href=&quot;http://maven.apache.org/&quot; data-href=&quot;http://maven.apache.org/&quot; rel=&quot;nofollow&quot;&gt;Apache Maven&lt;/a&gt; then this can be easily fixed.
&lt;/p&gt;

&lt;h3&gt;Talks and documentation&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-profiles.html&quot; rel=&quot;nofollow&quot;&gt;
Introduction to Build Profiles
&lt;/a&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/28861267/eclipse-maven-profile-ignored&quot; rel=&quot;nofollow&quot;&gt;
Eclipse + maven : profile ignored 
&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
And the solution is on &lt;a href=&quot;http://stackoverflow.com/&quot; rel=&quot;nofollow&quot;&gt;stackoverflow&lt;/a&gt; described as well, however i could not find the link to it anymore when writing this blog :) I hope you will share this link with me :)
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Preconditions&lt;/h3&gt;

&lt;p&gt;You need this environment setup in order to successfully complete the provided guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://maven.apache.org/&quot; data-href=&quot;http://maven.apache.org/&quot; rel=&quot;nofollow&quot;&gt;Apache Maven 3.x&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://www.eclipse.org/downloads/&quot; data-href=&quot;http://www.eclipse.org/downloads/&quot; rel=&quot;nofollow&quot;&gt;Eclipse
Luna&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;p&gt;
So far everything is about your &lt;strong&gt;pom.xml&lt;/strong&gt; file configuration.
You need to tell maven what resources should be filtered. Also tell maven which property file to use for resource filtering. 
And resolve this property file name dynamically using &lt;em&gt;filter.name&lt;/em&gt; maven property.
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;build&amp;gt;
    &amp;lt;!-- Add filter file name --&amp;gt;
    &amp;lt;filters&amp;gt;
        &amp;lt;filter&amp;gt;${basedir}/src/main/filters/${filter.name}.properties&amp;lt;/filter&amp;gt;
    &amp;lt;/filters&amp;gt;

    &amp;lt;plugins&amp;gt;
        &amp;lt;!--  Define filtered resources --&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-war-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.1&amp;lt;/version&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;failOnMissingWebXml&amp;gt;false&amp;lt;/failOnMissingWebXml&amp;gt;
                &amp;lt;webResources&amp;gt;
                    &amp;lt;resource&amp;gt;
                        &amp;lt;directory&amp;gt;${basedir}/src/main/webapp&amp;lt;/directory&amp;gt;
                        &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
                        &amp;lt;includes&amp;gt;
                            &amp;lt;include&amp;gt;WEB-INF/web.xml&amp;lt;/include&amp;gt;
                            &amp;lt;include&amp;gt;WEB-INF/jboss-web.xml&amp;lt;/include&amp;gt;
                        &amp;lt;/includes&amp;gt;
                    &amp;lt;/resource&amp;gt;
                &amp;lt;/webResources&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
Then define different profiles you will need. And tell each profile which property file should be applied (&lt;strong&gt;&amp;lt;filter.name&amp;gt;production&amp;lt;/filter.name&amp;gt;&lt;/strong&gt;).
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;profiles&amp;gt;
    &amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;default&amp;lt;/id&amp;gt;
        &amp;lt;activation&amp;gt;
            &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
        &amp;lt;/activation&amp;gt;
    &amp;lt;/profile&amp;gt;
    &amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;production&amp;lt;/id&amp;gt;
        &amp;lt;properties&amp;gt;
            &amp;lt;filter.name&amp;gt;production&amp;lt;/filter.name&amp;gt;
        &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;
&amp;lt;/profiles&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
But we would like to have a default configuration for local environment. Let&#39;s define it in &lt;strong&gt;pom.xml&lt;/strong&gt; as well.
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;properties&amp;gt;
    &amp;lt;!-- Default name of file for filtering --&amp;gt;
    &amp;lt;filter.name&amp;gt;localhost&amp;lt;/filter.name&amp;gt;
&amp;lt;/properties&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
Now, eclipse IDE should automatically resolve and use default properties when you import maven project.
For continuous delivery and console based builds you might be using such command:
&lt;/p&gt;

&lt;pre&gt;
mvn clean package -Pproduction
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;-P&lt;/b&gt; may be avoided if you want to use default properties, e.g. for development build.
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Properties file location&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
Yes, you may define your own property files location based on your project structure:
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;filters&amp;gt;
 &amp;lt;filter&amp;gt;${basedir}/src/main/filters/${filter.name}.properties&amp;lt;/filter&amp;gt;
&amp;lt;/filters&amp;gt;
&lt;/pre&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;
&lt;a href=&quot;https://github.com/aracrown/ara-blog-examples/tree/master/s01e02&quot; rel=&quot;nofollow&quot;&gt;Source in Git
repository&lt;/a&gt;

&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;
Hopefully you did enjoy reading!
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java EE application configuration using Aeonbits Owner</title>
   <link href="http://www.aracrown.org/blog/configuration/Java-EE-application-configuration-using-Aeonbits-Owner/"/>
   <updated>2015-05-01T00:00:00+03:00</updated>
   <id>http://www.aracrown.org/blog/configuration/Java-EE-application-configuration-using-Aeonbits-Owner</id>
   <content type="html">&lt;p&gt; 
Every (almost) Java EE based application needs configuration — local, test or production — it does not matter. What matters — how easily this
configuration solution is maintained and how easily the environment may be changed. 
&lt;/p&gt;

&lt;p&gt; 
There are many ways to achieve the requirement, however in this blog I will cover one of possible CDI based configuration solutions — Owner by &lt;a href=&quot;http://owner.aeonbits.org/&quot;&gt;http://owner.aeonbits.org/&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
Usually there are several stages when properties used in production:
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
Hardcoded properties (usually done by novice programmers, otherwise I would treat such properties as constants);&lt;/li&gt; &lt;li&gt;Properties file
inside application war file (different properties configured during build time. It is not correct, because the same build cannot be deployed on
different environments);
&lt;/li&gt; 
&lt;li&gt;
Properties file stored in server file system (properties are independent from war and is environment
specific).
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Java EE lacks easy configuration functionality. There are many discussions related to this topic
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href=&quot;http://www.adam-bien.com/roller/abien/entry/how_to_configure_java_ee&quot; data-href=&quot;http://www.adam-bien.com/roller/abien/entry/how_to_configure_java_ee&quot; rel=&quot;nofollow&quot;&gt;HOW TO
CONFIGURE JAVA EE 6+ APPLICATIONS&amp;nbsp;…WITHOUT XML&lt;/a&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/5335979/storing-and-editing-configuration-for-java-ee-applications&quot; data-href=&quot;http://stackoverflow.com/questions/5335979/storing-and-editing-configuration-for-java-ee-applications&quot; rel=&quot;nofollow&quot;&gt;Storing and editing configuration for Java EE applications at Stack Overflow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://blog.eisele.net/2011/09/configure-java-ee-applications-or.html&quot; data-href=&quot;http://blog.eisele.net/2011/09/configure-java-ee-applications-or.html&quot; rel=&quot;nofollow&quot;&gt;Configure
Java EE applications or “Putting Bien into practice”&lt;/a&gt; and more others.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
However they need custom actions to take into account:
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
You need to manage property injection yourself;
&lt;/li&gt;
&lt;li&gt;
You need to use &lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; data-href=&quot;http://projects.spring.io/spring-framework/&quot; rel=&quot;nofollow&quot;&gt;Spring framework&lt;/a&gt;, which has flexible configuration management mechanism. But do you need
&lt;a href=&quot;http://projects.spring.io/spring-framework/&quot; data-href=&quot;http://projects.spring.io/spring-framework/&quot; rel=&quot;nofollow&quot;&gt;Spring&lt;/a&gt; only for property loading? I believe — no ☺
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Preconditions&lt;/h3&gt;

&lt;p&gt;You need this environment setup in order to successfully complete the provided guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://maven.apache.org/&quot; data-href=&quot;http://maven.apache.org/&quot; rel=&quot;nofollow&quot;&gt;Apache Maven 3.x&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://www.eclipse.org/downloads/&quot; data-href=&quot;http://www.eclipse.org/downloads/&quot; rel=&quot;nofollow&quot;&gt;Eclipse
Luna&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
Java EE 7 profile
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://owner.aeonbits.org/&quot; data-href=&quot;http://owner.aeonbits.org/&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;Aeonbits Owner&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Implementation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Defining an interface&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;
/**&lt;br /&gt; * Application configuration properties are defined here.&lt;br /&gt; * &lt;br /&gt; * &lt;a href=&quot;http://twitter.com/author&quot; data-href=&quot;http://twitter.com/author&quot; title=&quot;Twitter profile for @author&quot; rel=&quot;nofollow&quot;&gt;@author&lt;/a&gt; vicento.ramos&lt;br /&gt; *&lt;br /&gt; */&lt;br /&gt;&lt;a href=&quot;http://twitter.com/HotReload&quot; data-href=&quot;http://twitter.com/HotReload&quot; title=&quot;Twitter profile for @HotReload&quot; rel=&quot;nofollow&quot;&gt;@HotReload&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://twitter.com/Sources&quot; data-href=&quot;http://twitter.com/Sources&quot; title=&quot;Twitter profile for @Sources&quot; rel=&quot;nofollow&quot;&gt;@Sources&lt;/a&gt;({
“file:/etc/my-app.properties”, “file:~/.my-app.properties”, “classpath:/my-app.properties” })&lt;br /&gt;&lt;a href=&quot;http://twitter.com/Named&quot; data-href=&quot;http://twitter.com/Named&quot; title=&quot;Twitter profile for @Named&quot; rel=&quot;nofollow&quot;&gt;@Named&lt;/a&gt;(“applicationConfig”)&lt;br /&gt;public interface ApplicationConfig extends Accessible {&lt;br /&gt; &lt;a href=&quot;http://twitter.com/DefaultValue&quot; data-href=&quot;http://twitter.com/DefaultValue&quot; title=&quot;Twitter profile
for @DefaultValue&quot; rel=&quot;nofollow&quot;&gt;@DefaultValue&lt;/a&gt;(“50”)&lt;br /&gt; &lt;a href=&quot;http://twitter.com/Key&quot; data-href=&quot;http://twitter.com/Key&quot; title=&quot;Twitter profile for @Key&quot; rel=&quot;nofollow&quot;&gt;@Key&lt;/a&gt;(“app.timeout”)&lt;br /&gt; int
getInitialTimeout();&lt;br /&gt;}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Creating a producer&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;
/**&lt;br /&gt; * Application scope based configuration file producer.&lt;br /&gt; * &lt;br /&gt; * &lt;a href=&quot;http://twitter.com/author&quot; data-href=&quot;http://twitter.com/author&quot; title=&quot;Twitter profile for @author&quot; rel=&quot;nofollow&quot;&gt;@author&lt;/a&gt; vicento.ramos&lt;br /&gt; *&lt;br /&gt; */&lt;br /&gt;&lt;a href=&quot;http://twitter.com/ApplicationScoped&quot; data-href=&quot;http://twitter.com/ApplicationScoped&quot; title=&quot;Twitter profile for @ApplicationScoped&quot; rel=&quot;nofollow&quot;&gt;@ApplicationScoped&lt;/a&gt;&lt;br /&gt;public class ApplicationConfigProducer {&lt;br /&gt; &lt;a href=&quot;http://twitter.com/Produces&quot; data-href=&quot;http://twitter.com/Produces&quot; title=&quot;Twitter profile for @Produces&quot; rel=&quot;nofollow&quot;&gt;@Produces&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;http://twitter.com/ApplicationScoped&quot; data-href=&quot;http://twitter.com/ApplicationScoped&quot; title=&quot;Twitter profile for @ApplicationScoped&quot; rel=&quot;nofollow&quot;&gt;@ApplicationScoped&lt;/a&gt;&lt;br /&gt; public ApplicationConfig
produceSportsConfig() {&lt;br /&gt; return ConfigFactory.create(ApplicationConfig.class);&lt;br /&gt; }&lt;br /&gt;}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Creating a properties file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;my-app.properties &lt;/strong&gt;file may be stored in one of these
locations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/my-app.properties&lt;/li&gt;
&lt;li&gt;.my-app.properties&lt;/li&gt;
&lt;li&gt;/my-app.properties&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And the content of the file:&lt;/p&gt;

&lt;pre&gt;app.timeout=30&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;/**&lt;br /&gt; * Sample injection point of properties.&lt;br /&gt; * &lt;br /&gt; * &lt;a href=&quot;http://twitter.com/author&quot; data-href=&quot;http://twitter.com/author&quot; title=&quot;Twitter profile for @author&quot; rel=&quot;nofollow&quot;&gt;@author&lt;/a&gt;
vicento.ramos&lt;br /&gt; *&lt;br /&gt; */&lt;br /&gt;&lt;a href=&quot;http://twitter.com/Named&quot; data-href=&quot;http://twitter.com/Named&quot; title=&quot;Twitter profile for @Named&quot; rel=&quot;nofollow&quot;&gt;@Named&lt;/a&gt;&lt;br /&gt;public class SampleService {&lt;br /&gt; &lt;a href=&quot;http://twitter.com/Inject&quot; data-href=&quot;http://twitter.com/Inject&quot; title=&quot;Twitter profile for @Inject&quot; rel=&quot;nofollow&quot;&gt;@Inject&lt;/a&gt;&lt;br /&gt;
private ApplicationConfig applicationConfig;&lt;br /&gt; &lt;br /&gt; public void method() {&lt;br /&gt; System.out.println(String.format(“Config value: %d”,
applicationConfig.getInitialTimeout()));&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;

&lt;h3&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Multiple configuration locations — you may configure multiple lookup locations where
configuration files may be fetched from;&lt;/li&gt;
&lt;li&gt;CDI Injection — Java EE based CDI injection using &lt;em&gt;@Named&lt;/em&gt; and &lt;em&gt;@Inject &lt;/em&gt;annotation&lt;/li&gt;&lt;li&gt;Default values — you may configure default values easily using &lt;em&gt;@DefaultValue&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Hot reload — you may easily define the interval for properties hot reloading using 
&lt;em&gt;@HotReload&lt;/em&gt;&lt;/li&gt;&lt;li&gt;And many more if required&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/aracrown/ara-blog-examples/tree/master/s01e01&quot; data-href=&quot;https://github.com/aracrown/ara-blog-examples/tree/master/s01e01&quot; rel=&quot;nofollow&quot;&gt;Source in Git
repository&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

</content>
 </entry>
 
 
</feed>